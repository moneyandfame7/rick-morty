/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ukraine.gltf --transform --types
Author: Space XR Academy (https://sketchfab.com/SpaceXRAcademy)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ukraine-463fdb83781647889a4b0b8956af2d1b
Title: Ukraine
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh
  }
  materials: {
    Flag: THREE.MeshStandardMaterial
  }
}

type ActionName = 'KeyAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/ukraine-transformed.glb') as GLTFResult
  const { actions } = useAnimations<any>(animations, group)
  return (
    <group ref={group as any} {...props} dispose={null}>
      <group name='Sketchfab_Scene'>
        <group name='Sketchfab_model' rotation={[-Math.PI / 2, 0, 0]}>
          <group name='root'>
            <group name='GLTF_SceneRootNode' rotation={[Math.PI / 2, 0, 0]}>
              <group name='Sketchfab_model_0' rotation={[-Math.PI / 2, 0, 0]}>
                <group name='root_1'>
                  <group name='GLTF_SceneRootNode_2' rotation={[Math.PI / 2, 0, 0]}>
                    <group name='Sketchfab_model_0_3' rotation={[-Math.PI / 2, 0, 0]}>
                      <group name='root_1_4'>
                        <group name='GLTF_SceneRootNode_2_5' rotation={[Math.PI / 2, 0, 0]}>
                          <group name='RootNode_(gltf_orientation_matrix)_0_3_6' rotation={[-Math.PI / 2, 0, 0]}>
                            <group name='RootNode_(model_correction_matrix)_1_4_7'>
                              <group name='root_2_5_8'>
                                <group name='GLTF_SceneRootNode_3_6_9' rotation={[Math.PI / 2, 0, 0]}>
                                  <group name='Flag_ShapeKeys_2_4_7_10'>
                                    <group name='mesh_0_5_8_11'>
                                      <group name='mesh_0_9_12'>
                                        <group name='mesh_0_13'>
                                          <mesh
                                            name='mesh_0'
                                            geometry={nodes.mesh_0.geometry}
                                            material={materials.Flag}
                                            morphTargetDictionary={nodes.mesh_0.morphTargetDictionary}
                                            morphTargetInfluences={nodes.mesh_0.morphTargetInfluences}
                                          />
                                        </group>
                                      </group>
                                    </group>
                                  </group>
                                </group>
                              </group>
                            </group>
                          </group>
                        </group>
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/ukraine-transformed.glb')
